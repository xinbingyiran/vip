<reactiveUi:ReactiveUserControl x:TypeArguments="viewModels:ModPageViewModel"
                                xmlns="https://github.com/avaloniaui"
                                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                                xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                                xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                                xmlns:viewModels="clr-namespace:Scarab.ViewModels"
                                xmlns:views="clr-namespace:Scarab.Views"
                                xmlns:mock="clr-namespace:Scarab.Mock;assembly=Scarab"
                                xmlns:ext="clr-namespace:Scarab.Extensions"
                                xmlns:i="clr-namespace:Projektanker.Icons.Avalonia;assembly=Projektanker.Icons.Avalonia"
                                xmlns:reactiveUi="http://reactiveui.net"
                                xmlns:c="clr-namespace:Scarab.Converters"
                                mc:Ignorable="d" d:DesignWidth="980" d:DesignHeight="550"
                                x:Class="Scarab.Views.ModPageView"
                                x:DataType="viewModels:ModPageViewModel"
                                d:DataContext="{x:Static mock:MockModPageViewModel.DesignInstance}"
                                Name="UserControl">
    <DockPanel>
        <!-- We disable these because ReSharper doesn't support finding the themes classes/resources afaict -->
        <!-- ReSharper disable Xaml.StyleClassNotFound -->
        <!-- ReSharper disable Xaml.StaticResourceNotResolved -->
        <ProgressBar
            DockPanel.Dock="Bottom"

            MaxHeight="8"
            MinHeight="8"

            Name="Bar"

            IsVisible="{Binding ProgressBarVisible}"

            IsIndeterminate="{Binding ProgressBarIndeterminate}"

            Minimum="0"
            Maximum="100"
            Value="{Binding Progress}" />

        <Border DockPanel.Dock="Top"
                Margin="10 10 10 5">
            <Grid
                ColumnDefinitions="500,*,Auto,Auto"
                RowDefinitions="Auto, 5, Auto">
                <Border
                    Grid.Row="0"
                    Grid.Column="0"
                    Theme="{StaticResource CardBorder}"
                    Margin="5 0"
                    Padding="0"
                    Background="{DynamicResource TextBoxDefaultBackground}">
                    <DockPanel>
                        <i:Icon Margin=" 5 0 5 0" Value="fa-solid fa-magnifying-glass" />
                        <TextBox
                            x:Name="Search"
                            Name="Search"
                            Watermark="{ext:Localize XAML_SearchMark}"
                            BorderThickness="0"
                            Background="Transparent"
                            Text="{Binding Search}" />
                    </DockPanel>
                </Border>
				<!--<Button Classes="Primary"
                        Theme="{DynamicResource SolidButton}"
                        Grid.Column="2"
                        Grid.Row="0"
                        Margin=" 5 0"
                        IsEnabled="{Binding CanCacheAll}"						
                        Command="{Binding CacheAll}"
                        VerticalAlignment="Stretch">
					<StackPanel Orientation="Horizontal" Spacing="5">
						<i:Icon Value="fa-solid fa-rotate" />
						<TextBlock Text="Cache All" />
					</StackPanel>
				</Button>-->
                <Grid Grid.Column="0"
                      Grid.Row="2"
                      ColumnDefinitions="auto, *">
                    <Border
                        Grid.Column="0"
                        Margin="5 0"
                        VerticalAlignment="Center"
                        Theme="{StaticResource RadioButtonGroupBorder}">
                        <StackPanel Orientation="Horizontal">
                            <RadioButton
                                Classes="Small"
                                IsChecked="True"
                                Theme="{DynamicResource ButtonRadioButton}"
                                Content="{ext:Localize XAML_ModsFilter_All}" Command="{Binding SelectAll}" />
                            <RadioButton Classes="Small"
                                         Theme="{DynamicResource ButtonRadioButton}"
                                         Content="{ext:Localize XAML_ModsFilter_Installed}"
                                         Command="{Binding SelectInstalled}" />
                            <RadioButton Classes="Small"
                                         Theme="{DynamicResource ButtonRadioButton}"
                                         Content="{ext:Localize XAML_ModsFilter_Enabled}"
                                         Command="{Binding SelectEnabled}" />
                            <RadioButton Classes="Small"
                                         Theme="{DynamicResource ButtonRadioButton}"
                                         Content="{ext:Localize XAML_ModsFilter_OutOfDate}"
                                         Command="{Binding SelectUnupdated}" />
                        </StackPanel>
                    </Border>

                    <!--TODO: Localize tags, Use a value converter? -->
                    <ComboBox
                        Grid.Column="1"
                        Margin="5 0"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Center"
                        x:Name="TagBox"
                        PlaceholderText="Filter Tags"
                        ItemsSource="{Binding Tags, Mode=OneWay}"
                        Classes="Small" />
                </Grid>

                <ToggleSplitButton
                    Grid.Column="3"
                    Grid.Row="0"
                    Margin="5 0"
                    Classes="Primary"
                    Width="140"
                    IsChecked="{Binding Api, Converter={x:Static c:ModStateConverters.IsInstalledAndEnabled}, Mode=OneWay}"
                    Command="{Binding ToggleApi}"
                    VerticalAlignment="Stretch">
                    <StackPanel Orientation="Horizontal" Spacing="5">
                        <i:Icon Value="fa-solid fa-power-off" />
                        <TextBlock Text="{Binding Api, Converter={x:Static c:ModStateConverters.ToApiToggleInstallString}}" />
                    </StackPanel>
                    <ToggleSplitButton.Styles>
                        <Style Selector="Button#PART_SecondaryButton">
                            <Setter Property="IsVisible" Value="{Binding Api, Converter={x:Static c:ModStateConverters.IsInstalled}}" />
                        </Style>
                    </ToggleSplitButton.Styles>
                    <ToggleSplitButton.Flyout>
                            <MenuFlyout Placement="BottomEdgeAlignedRight">
                                <MenuItem
                                    Header="Re-install API"
                                    Command="{Binding ReinstallApi}" />
                            </MenuFlyout>
                    </ToggleSplitButton.Flyout>
                </ToggleSplitButton>

                <Button Classes="Primary"
                        Theme="{DynamicResource SolidButton}"
                        Grid.Column="2"
                        Grid.Row="2"
                        Margin=" 5 0"
                        Command="{Binding OpenModsDirectory}"
                        VerticalAlignment="Stretch">
                    <StackPanel Orientation="Horizontal" Spacing="5">
                        <i:Icon Value="fa-regular fa-folder-open" />
                        <TextBlock Text="Open Mods" />
                    </StackPanel>
                </Button>

                <Button Classes="Primary"
                        Theme="{DynamicResource SolidButton}"
                        Grid.Column="3"
                        Grid.Row="2"
                        Margin=" 5 0"
                        IsEnabled="{Binding CanUpdateAll}"
                        Command="{Binding UpdateAll}"
                        VerticalAlignment="Stretch">
                    <StackPanel Orientation="Horizontal" Spacing="5">
                        <i:Icon Value="fa-solid fa-rotate" />
                        <TextBlock Text="Update All" />
                    </StackPanel>
                </Button>
            </Grid>
        </Border>


        <Separator DockPanel.Dock="Top" />

        <SplitView
            Name="SplitView"
            DisplayMode="CompactInline"
            OpenPaneLength="510"
            PanePlacement="Left"
            IsPaneOpen="True">

            <!-- Details of the selected item -->
            <views:ModDetailsView />

            <SplitView.Pane>
                <views:ModListView />
            </SplitView.Pane>
        </SplitView>
    </DockPanel>
</reactiveUi:ReactiveUserControl>